import java.util.*;

public class permutation {
    public static List<List<Integer>> permute(int[] nums){
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, new ArrayList<>(), result); // Corrected call to backtrack
        return result;
    }

    public static void backtrack(int[] nums, List<Integer> path, List<List<Integer>> result){
        if(path.size() == nums.length){
            result.add(new ArrayList<>(path));
            return;
        }

        for(int i = 0;i<nums.length;i++){
            if(path.contains(nums[i])) continue;
            path.add(nums[i]);
            backtrack(nums, path, result);
            path.remove(path.size() -1);
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        List<List<Integer>> allPermutations = permute(nums);
        System.out.println("All permutations:");
        for (List<Integer> p : allPermutations) {
            System.out.println(p);
        }
    }
}